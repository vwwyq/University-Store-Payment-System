// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  university    String    @default("KIIT University")
  major         String?
  bio           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profileImage  String?
  isVerified    Boolean   @default(false)
  memberSince   DateTime  @default(now())
  
  // Relations
  listings      Listing[]
  purchases     Purchase[]
  reviews       Review[]   @relation("ReceivedReviews")
  reviewsGiven  Review[]   @relation("GivenReviews")
  wallet        Wallet?
}

model Listing {
  id          String    @id @default(uuid())
  title       String
  description String
  price       Float
  category    String
  condition   String
  images      String[]
  location    String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  sellerId    String
  seller      User      @relation(fields: [sellerId], references: [id])
  purchases   Purchase[]
}

model Purchase {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  status      String    // "pending", "completed", "cancelled"
  
  // Relations
  buyerId     String
  buyer       User      @relation(fields: [buyerId], references: [id])
  listingId   String
  listing     Listing   @relation(fields: [listingId], references: [id])
}

model Review {
  id          String    @id @default(uuid())
  rating      Int       // 1-5 stars
  comment     String?
  createdAt   DateTime  @default(now())
  
  // Relations
  reviewerId  String
  reviewer    User      @relation("GivenReviews", fields: [reviewerId], references: [id])
  userId      String
  user        User      @relation("ReceivedReviews", fields: [userId], references: [id])
}

model Wallet {
  id          String    @id @default(uuid())
  balance     Float     @default(0)
  
  // Relations
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model Transaction {
  id          String    @id @default(uuid())
  amount      Float
  type        String    // "topup", "purchase", "sale", "withdrawal"
  description String
  status      String    // "pending", "completed", "failed"
  timestamp   DateTime  @default(now())
  
  // Relations
  walletId    String
  wallet      Wallet    @relation(fields: [walletId], references: [id])
  relatedItemId String?
  relatedUserId String?
}

